/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_DOM__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/DOM */ \"./src/modules/DOM.js\");\n\n\n//# sourceURL=webpack://battleship/./src/index.js?");

/***/ }),

/***/ "./src/modules/DOM.js":
/*!****************************!*\
  !*** ./src/modules/DOM.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper */ \"./src/modules/helper.js\");\n/* harmony import */ var _gameboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gameboard */ \"./src/modules/gameboard.js\");\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./player */ \"./src/modules/player.js\");\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./game */ \"./src/modules/game.js\");\n\n\n\n\n\n//expect coordinate to be 1D.\nconst checkIfCoordinateAllowsShip = coordinate => {\n    let squares = document.querySelectorAll(\"#setup-board > div\");\n    if (squares[coordinate].classList.length != 0 && !squares[coordinate].classList.contains(\"hover-effect\") && !squares[coordinate].classList.contains(\"original-section\")) return false;\n    let surrounding = (0,_helper__WEBPACK_IMPORTED_MODULE_0__.findAdjacentPositions)(coordinate);\n\n    function checkIfOccupied(otherPosition) {\n        if(otherPosition != null && squares[otherPosition].classList.length != 0 && !squares[otherPosition].classList.contains(\"hover-effect\") && !squares[otherPosition].classList.contains(\"original-section\")) return true;\n        return false;\n    }\n\n    if(checkIfOccupied(surrounding.findLeft()) || checkIfOccupied(surrounding.findRight()) || checkIfOccupied(surrounding.findBottom()) || checkIfOccupied(surrounding.findTop()) || checkIfOccupied(surrounding.findBLDiagonal()) || checkIfOccupied(surrounding.findBRDiagonal()) || checkIfOccupied(surrounding.findTLDiagonal()) || checkIfOccupied(surrounding.findTRDiagonal())) return false;\n    return true;\n}\n\n//Horizontal and vertical does not check starting point.\nfunction findHorizontalCoordinatesIfFit(shipSize, coordinate) {\n    let horizontalExtreme = coordinate + shipSize - 1;\n    if(Math.floor(coordinate / 10) === Math.floor((horizontalExtreme) / 10) && horizontalExtreme < 100) {\n        let i = 1;\n        let horizontalIndexes = [coordinate];\n        while(i < shipSize && checkIfCoordinateAllowsShip(coordinate + i)) {\n            horizontalIndexes.push(coordinate + i);\n            i++;\n        }\n        if(i === shipSize) return horizontalIndexes;\n    }\n    return null;\n}\n\nfunction findVerticalCoordinatesIfFit(shipSize, coordinate) {\n    let verticalExtreme = coordinate + (10 * (shipSize - 1));\n    if(coordinate % 10 === verticalExtreme % 10 && verticalExtreme < 100) {\n        let i = 1;\n        let verticalIndexes = [coordinate];\n        while(i < shipSize && checkIfCoordinateAllowsShip(coordinate + i * 10)) {\n            verticalIndexes.push(coordinate + i * 10);\n            i++;\n        }\n        if(i === shipSize) return verticalIndexes;\n    }\n    return null;\n}\n\n//expect coordinate to be 1D. Returns position(s) if ship can be added with coordinate as a starting point from left to right or top to bottom.\nconst getPositionsShipCanFitFromStartingIndex = (shipSize, coordinate) => {\n    let allowedIndexes = [];\n    if(checkIfCoordinateAllowsShip(coordinate) == false) return allowedIndexes;\n\n    let horizontalCoordinates = findHorizontalCoordinatesIfFit(shipSize, coordinate);\n    if(horizontalCoordinates != null) allowedIndexes.push(horizontalCoordinates);\n\n    let verticalCoordinates = findVerticalCoordinatesIfFit(shipSize, coordinate);\n    if(verticalCoordinates != null) allowedIndexes.push(verticalCoordinates);\n    \n    return allowedIndexes;\n}\n\nfunction findSpecialClasses() {\n    let specialClasses = [];\n    [...document.getElementsByClassName(\"draggable-section\")].forEach(ds => {\n        let specialClass;\n        for(let i = 0; i < ds.classList.length; i++) {\n            let item = ds.classList.item(i);\n            let regex = /draggable-ship-*/;\n            if(regex.test(item)) specialClass = item; \n        }\n        if(!specialClasses.includes(specialClass)) specialClasses.push(specialClass);\n    });\n    return specialClasses;\n}\n\nconst randomizeShipPlacement = () => {\n    let coordinates = [];\n    let specialClasses = findSpecialClasses();\n\n    specialClasses.forEach(s => {\n        let allGridSpaces = document.querySelectorAll(\"#setup-board > div\");\n        let availableGridIndexes = [...allGridSpaces].map((s,i) => i);\n        let shipSections = [...document.getElementsByClassName(s)];\n        let size = shipSections.length;\n        let possiblePositions;\n        do {\n            let randomIndex = Math.floor(Math.random() * availableGridIndexes.length);\n            possiblePositions = getPositionsShipCanFitFromStartingIndex(size, availableGridIndexes[randomIndex]);\n            availableGridIndexes.splice(randomIndex, 1);\n        }while(possiblePositions.length === 0);\n\n        let position = possiblePositions[Math.floor(Math.random() * possiblePositions.length)];\n\n        let shipLocation = [];\n        if(position.length > 1 && position[1] !== position[0] + 1) {\n            shipSections[0].classList.add(\"revealed-ship-top\");\n            shipSections[0].classList.remove(\"revealed-ship-left\");\n            shipSections[shipSections.length - 1].classList.add(\"revealed-ship-bottom\");\n            shipSections[shipSections.length - 1].classList.remove(\"revealed-ship-right\");\n        }\n        else if (position.length > 1) {\n            shipSections[0].classList.remove(\"revealed-ship-top\");\n            shipSections[0].classList.add(\"revealed-ship-left\");\n            shipSections[shipSections.length - 1].classList.remove(\"revealed-ship-bottom\");\n            shipSections[shipSections.length - 1].classList.add(\"revealed-ship-right\");\n        }\n        position.forEach((p, i) => {\n            let div = allGridSpaces[p];\n            shipLocation.push(p);\n            div.innerHTML = shipSections[i].innerHTML;\n            while(div.classList.length > 0) div.classList.remove(div.classList.item(0));\n            for(let c = 0; c < shipSections[i].classList.length; c++) {\n                div.classList.add(shipSections[i].classList.item(c));\n            }\n            div.setAttribute(\"draggable\", true);\n\n            if(document.getElementById(\"ship-pieces\").getElementsByClassName(s).length === 0) {\n                let clearedDiv = document.createElement(\"div\");\n                shipSections[i].replaceWith(clearedDiv);\n            }\n        });\n        coordinates.push(shipLocation);\n    });\n    document.getElementById(\"ship-pieces\").innerHTML = \"\";\n    return {coordinates};\n}\n\nfunction createDivForHover(isValid) {\n    let hoverDiv = document.createElement(\"div\");\n    hoverDiv.classList.add(\"hover-effect\");\n    if(isValid) hoverDiv.style.backgroundColor = \"white\";\n    else hoverDiv.style.backgroundColor = \"red\";\n    return hoverDiv;\n}\n\nlet game;\n\nconst initialSetup = (() => {\n    const form = document.getElementById(\"setup-form\");\n    form.onsubmit = e => {\n        e.preventDefault();\n        let nameInput = document.getElementById(\"name\");\n        if(nameInput.value.trim() === \"\") return false;\n        else {\n            let placementDiv = document.getElementById(\"ship-placement\");\n            placementDiv.getElementsByTagName(\"h2\")[0].textContent = \"Captain \" + nameInput.value + \"'s board\";\n            form.style.display = \"none\";\n            placementDiv.style.filter = \"none\";\n        }\n    }\n\n    const setupBoard = document.getElementById(\"setup-board\");\n    let playerCoordinates = [];\n    let playerBoard;\n    let enemyCoordinates;\n    let enemyBoard;\n\n    let draggables = document.getElementsByClassName(\"draggable\");\n    let dragDropOffs = document.querySelectorAll(\"#setup-board > div\");\n\n    function removeDragStyles(divArr) {\n        divArr.forEach(h => {\n            [...h.getElementsByClassName(\"hover-effect\")].forEach(he => {\n                he.remove();\n            });\n        });\n    }\n\n    let lastHoveredOverDivs;\n    function addDropOffEvent(d, i) {\n        let validPosition;\n        let hoveredOverDivs = [];\n\n        d.ondragenter = e => {\n            e.preventDefault();\n            if(lastHoveredOverDivs != undefined) removeDragStyles(lastHoveredOverDivs);\n            hoveredOverDivs = [];\n\n            let grabbedItem = document.getElementsByClassName(\"grabbed\")[0];\n            let size = [...grabbedItem.getElementsByTagName(\"div\")].length;\n            let isHorizontal = grabbedItem.getElementsByTagName(\"div\")[0].classList.contains(\"revealed-ship-left\");\n\n            if(isHorizontal && (!checkIfCoordinateAllowsShip(i) || findHorizontalCoordinatesIfFit(size, i) == null)) {\n                let offset = 0;\n                while((i + offset) < 100 && offset < size && Math.floor(i / 10) === Math.floor((i + offset) / 10)) {\n                    let div = document.querySelectorAll(\"#setup-board > div\")[i + offset];\n                    div.append(createDivForHover(false));\n                    hoveredOverDivs.push(div);\n                    offset++;\n                }\n                validPosition = false;\n            }\n            else if(!isHorizontal && (!checkIfCoordinateAllowsShip(i) || findVerticalCoordinatesIfFit(size, i) == null)) {\n                let offset = 0;\n                while((i + offset) < 100 && offset < size * 10 && i % 10 === (i + offset) % 10){\n                    let div = document.querySelectorAll(\"#setup-board > div\")[i + offset];\n                    div.append(createDivForHover(false));\n                    hoveredOverDivs.push(div);\n                    offset += 10;\n                } \n                validPosition = false;\n            }\n            else {\n                let max = size * 10;\n                let change = 10;\n                if(isHorizontal) {\n                    change = 1;\n                    max = size;\n                }\n\n                for(let offset = 0; offset < max; offset += change) {\n                    let div = document.querySelectorAll(\"#setup-board > div\")[i + offset];\n                    div.append(createDivForHover(true));\n                    hoveredOverDivs.push(div);\n                }\n                validPosition = true;\n            }\n            lastHoveredOverDivs = hoveredOverDivs;\n        }\n\n        d.ondragover = e => {\n            e.preventDefault();\n            e.dataTransfer.dropEffect = \"move\";\n        }\n\n        d.ondrop = e => {\n            e.preventDefault();\n            let originalSections = [...document.getElementsByClassName(\"original-section\")];\n            \n            if(validPosition) {\n                let ship = e.dataTransfer.getData(\"ship\");\n                let shipDiv = document.createElement(\"div\");\n                shipDiv.innerHTML = ship;\n                let shipSections = shipDiv.getElementsByTagName(\"div\");\n                hoveredOverDivs.forEach(h => {\n                    let section = shipSections[0];\n                    let index = Array.prototype.indexOf.call(document.querySelectorAll(\"#setup-board > div\"), h);\n                    section.setAttribute(\"draggable\", true);\n                    h.replaceWith(section);\n                    addDropOffEvent(section, index);\n                });\n\n                if(originalSections.length === 0) document.getElementsByClassName(\"grabbed\")[0].remove();\n                else {\n                    originalSections.forEach(o => {\n                        let index = Array.prototype.indexOf.call(document.querySelectorAll(\"#setup-board > div\"), o);\n                        let replacement = document.createElement(\"div\");\n                        addDropOffEvent(replacement, index);\n                        o.replaceWith(replacement);\n                        o.classList.remove(\"original-section\");\n                    });\n                }\n\n                if(document.getElementById(\"ship-pieces\").getElementsByTagName(\"div\").length === 0) {\n                    document.getElementById(\"start-game-btn\").style.color = \"white\";\n                }\n            }\n            else if (originalSections.length !== 0) {\n                originalSections.forEach(o => o.classList.remove(\"original-section\"));\n            }\n            \n            hoveredOverDivs = [];\n            document.getElementById(\"ship-pieces\").style.backgroundColor = \"var(--green-screen)\";\n        }\n    }\n\n    [...dragDropOffs].forEach((d,i) => {\n        addDropOffEvent(d,i);\n    });\n\n    function sectionDragEvents() {\n        let dragSections = [...document.getElementsByClassName(\"draggable-section\")];\n\n        dragSections.forEach(s => {\n            let specialClass;\n            for(let i = 0; i < s.classList.length; i++) {\n                let item = s.classList.item(i);\n                let regex = /draggable-ship-*/;\n                if(regex.test(item)) specialClass = item; \n            }\n            let specialClassShips = [...document.getElementsByClassName(specialClass)];\n    \n            s.onmouseenter = e => {\n                specialClassShips.forEach(sc => {\n                    if(sc.classList.contains(\"revealed-ship-middle\")) sc.style.backgroundColor = \"var(--light-ship-color)\";\n                    else sc.getElementsByTagName(\"i\")[0].style.color = \"var(--light-ship-color)\";\n                });\n            }\n\n            s.onmouseleave = e => {\n                specialClassShips.forEach(sc => {\n                    if(sc.classList.contains(\"revealed-ship-middle\")) sc.style.backgroundColor = \"var(--ship-color)\";\n                    else sc.getElementsByTagName(\"i\")[0].style.color = \"var(--ship-color)\";\n                });\n            }\n\n            s.onclick = e => {\n                let isHorizontal = specialClassShips[0].classList.contains(\"revealed-ship-left\");\n                let index = Array.prototype.indexOf.call(document.querySelectorAll(\"#setup-board > div\"), specialClassShips[0]);\n                let size = specialClassShips.length;\n\n                specialClassShips.forEach(s => s.classList.add(\"original-section\"));\n\n                let originalCoordinates;\n                let newCoordinates;\n                if(isHorizontal) {\n                    originalCoordinates = findHorizontalCoordinatesIfFit(size, index);\n                    newCoordinates = findVerticalCoordinatesIfFit(size, index);\n                }\n                else {\n                    originalCoordinates = findVerticalCoordinatesIfFit(size, index);\n                    newCoordinates = findHorizontalCoordinatesIfFit(size, index);\n                }\n\n                specialClassShips.forEach(s => s.classList.remove(\"original-section\"));\n\n                if(newCoordinates != null)  {\n                    if(isHorizontal) {\n                        specialClassShips[0].classList.add(\"revealed-ship-top\");\n                        specialClassShips[0].classList.remove(\"revealed-ship-left\");\n                        specialClassShips[specialClassShips.length - 1].classList.add(\"revealed-ship-bottom\");\n                        specialClassShips[specialClassShips.length - 1].classList.remove(\"revealed-ship-right\");\n                    }\n                    else {\n                        specialClassShips[0].classList.remove(\"revealed-ship-top\");\n                        specialClassShips[0].classList.add(\"revealed-ship-left\");\n                        specialClassShips[specialClassShips.length - 1].classList.remove(\"revealed-ship-bottom\");\n                        specialClassShips[specialClassShips.length - 1].classList.add(\"revealed-ship-right\");\n                    }\n                    newCoordinates.forEach((c,i) => {\n                        if(i !== 0) {\n                            let newLocation = document.querySelectorAll(\"#setup-board > div\")[c];\n                            let oldLocation = specialClassShips[i];\n                            for(let cl = 0; cl < oldLocation.classList.length; cl++) {\n                                newLocation.classList.add(oldLocation.classList.item(cl));\n                            }\n                            newLocation.innerHTML = oldLocation.innerHTML;\n\n                            let replacement = document.createElement(\"div\");\n                            document.querySelectorAll(\"#setup-board > div\")[originalCoordinates[i]].replaceWith(replacement);\n                            addDropOffEvent(replacement, originalCoordinates[i]);\n                        }\n                    });\n                }\n            \n                sectionDragEvents();\n            }\n\n            s.ondragstart = e => {\n                let div = document.createElement(\"div\");\n                div.classList.add(\"drag-image\");\n                div.classList.add(\"drag-ship\");\n                div.classList.add(\"grabbed\");\n                div.style.display = \"flex\";\n\n                let isHorizontal = specialClassShips[0].classList.contains(\"revealed-ship-left\");\n                if(!isHorizontal) div.style.flexDirection = \"column\";\n\n                document.getElementsByTagName(\"body\")[0].append(div);\n                specialClassShips.forEach(c => {\n                    let sectionClone = c.cloneNode(true);\n                    div.append(sectionClone);\n                    c.classList.add(\"original-section\");\n                });\n                e.dataTransfer.setDragImage(div, 0, 0);\n\n                e.dataTransfer.setData(\"ship\", div.innerHTML);\n                e.dataTransfer.setData(\"size\", specialClassShips.length);\n                e.dataTransfer.setData(\"isHorizontal\", isHorizontal);\n            }\n\n            s.ondragend = e => {\n                removeDragStyles([...document.querySelectorAll(\"#setup-board > div\")]);\n                document.getElementsByClassName(\"drag-image\")[0].remove();\n                specialClassShips.forEach(c => c.classList.remove(\"original-section\"));\n                sectionDragEvents();\n            }\n        });\n    }\n\n    function addBoxDragEvents(d) {\n        let shipSection = d.getElementsByTagName(\"div\");\n        d.ondragstart = e => {\n            d.classList.add(\"grabbed\");\n            e.dataTransfer.setData(\"ship\", d.innerHTML);\n            e.dataTransfer.setData(\"size\", [...shipSection].length);\n            e.dataTransfer.setData(\"isHorizontal\", [...shipSection][0].classList.contains(\"revealed-ship-left\"));\n\n            let clone = d.cloneNode(true);\n            clone.style.background = \"none\";\n            clone.classList.add(\"drag-image\");\n            document.getElementsByTagName(\"body\")[0].append(clone);\n            e.dataTransfer.setDragImage(clone, 0, 0);\n        }\n\n        d.ondragend = e => {\n            d.classList.remove(\"grabbed\");\n            removeDragStyles([...document.querySelectorAll(\"#setup-board > div\")]);\n            document.getElementsByClassName(\"drag-image\")[0].remove();\n            sectionDragEvents();\n        }\n\n        let shipIcons = d.getElementsByTagName(\"i\");\n        if(shipIcons.length > 1) {\n            d.onclick = () => {\n                if(d.style.flexDirection != \"column\") {\n                    d.style.flexDirection = \"column\";\n                    shipSection[0].classList.add(\"revealed-ship-top\");\n                    shipSection[0].classList.remove(\"revealed-ship-left\");\n                    shipSection[shipSection.length - 1].classList.add(\"revealed-ship-bottom\");\n                    shipSection[shipSection.length - 1].classList.remove(\"revealed-ship-right\");\n                }\n                else {\n                    d.style.flexDirection = \"row\";\n                    shipSection[0].classList.add(\"revealed-ship-left\");\n                    shipSection[0].classList.remove(\"revealed-ship-top\");\n                    shipSection[shipSection.length - 1].classList.add(\"revealed-ship-right\");\n                    shipSection[shipSection.length - 1].classList.remove(\"revealed-ship-bottom\");\n                }\n            }\n        }\n    }\n\n    [...draggables].forEach((d,i) => {\n        let shipSection = d.getElementsByTagName(\"div\");\n        [...shipSection].forEach(s => {\n            s.classList.add(\"draggable-ship-\" + i)\n            s.classList.add(\"draggable-section\");\n        });\n        addBoxDragEvents(d);\n    });\n\n    let backToInitialBox = (() => {\n        let initialDragBox = document.getElementById(\"ship-pieces\"); \n        let count = 0;\n        \n        initialDragBox.ondragenter = e => {\n            e.preventDefault();\n            count++;\n            initialDragBox.style.backgroundColor = \"rgb(60, 189, 145)\";\n        }\n\n        initialDragBox.ondragleave = e => {\n            e.preventDefault();\n            count--;\n            if(count === 0) document.getElementById(\"ship-pieces\").style.backgroundColor = \"var(--green-screen)\";\n        }\n\n        initialDragBox.ondragover = e => {\n            e.preventDefault();\n            e.dataTransfer.dropEffect = \"move\";\n        }\n\n        initialDragBox.ondrop = e => {\n            e.preventDefault();\n            let originalSections = [...document.getElementsByClassName(\"original-section\")];\n\n            if(originalSections.length !== 0) {\n                let shipInfo = e.dataTransfer.getData(\"ship\");\n                let div = document.createElement(\"div\");\n                div.innerHTML = shipInfo;\n                let isHorizontal = [...div.getElementsByTagName(\"div\")][0].classList.contains(\"revealed-ship-left\");\n                div.setAttribute(\"draggable\", true);\n                div.classList.add(\"drag-ship\");\n                div.classList.add(\"draggable\");\n                if(!isHorizontal) div.style.flexDirection = \"column\";\n                [...div.getElementsByTagName(\"div\")].forEach(d => d.setAttribute(\"draggable\", false));\n                initialDragBox.append(div);\n                addBoxDragEvents(div);\n\n                originalSections.forEach(o => {\n                    let replacement = document.createElement(\"div\");\n                    let index = Array.prototype.indexOf.call(document.querySelectorAll(\"#setup-board > div\"), o);\n                    o.replaceWith(replacement);\n                    addDropOffEvent(replacement, index);\n                });\n            }\n            \n            originalSections.forEach(o => o.classList.remove(\"original-section\"));\n            initialDragBox.style.backgroundColor = \"var(--green-screen)\";\n            document.getElementById(\"start-game-btn\").style.color = \"gray\";\n        }\n\n    })();\n\n    //updates player coordinates\n    document.getElementById(\"randomizer-btn\").onclick = () => {\n        randomizeShipPlacement();\n        sectionDragEvents();\n        [...document.querySelectorAll(\"#setup-board > div\")].forEach((d,i) => {\n            addDropOffEvent(d, i);\n        });\n        document.getElementById(\"start-game-btn\").style.color = \"white\";\n    }\n\n    //Assumes ships are all on grid.\n    function copyShipsToInitialBox() {\n        let specialClasses = findSpecialClasses();\n        specialClasses.forEach(sc => {\n            let div = document.createElement(\"div\");\n            div.setAttribute(\"draggable\", true);\n            div.classList.add(\"drag-ship\");\n            div.classList.add(\"draggable\");\n            div.style.flexDirection = \"row\";\n\n            let sections = [...document.getElementsByClassName(sc)];\n            sections.forEach(s => {\n                let clone = s.cloneNode(true);\n                clone.setAttribute(\"draggable\", false);\n\n                if(clone.classList.contains(\"revealed-ship-top\")) {\n                    clone.classList.remove(\"revealed-ship-top\");\n                    clone.classList.add(\"revealed-ship-left\");\n                }\n                else if (clone.classList.contains(\"revealed-ship-bottom\")) {\n                    clone.classList.remove(\"revealed-ship-bottom\");\n                    clone.classList.add(\"revealed-ship-right\");\n                }\n                div.append(clone);\n            });\n            document.getElementById(\"ship-pieces\").append(div);\n            addBoxDragEvents(div);\n        });\n    }\n\n    function clearBoard(board) {\n        let divs = board.querySelectorAll(\"#\" + board.id +  \" > div\");\n        for(let i = 0; i < divs.length; i++) {\n            while(divs[i].classList.length > 0) divs[i].classList.remove(divs[i].classList.item(0));\n            divs[i].innerHTML = \"\";\n            divs[i].setAttribute(\"draggable\", false);\n        }\n    }\n\n    //All contents of board will be cleared before contents of boardToCopy are copied.\n    function copyBoard (boardToCopy, board) {\n        let copiedDivs = document.querySelectorAll(\"#\" + boardToCopy.id +  \" > div\");\n        board.innerHTML = \"\";\n        for(let i = 0; i < copiedDivs.length; i++) {\n            let div = document.createElement(\"div\");\n            board.append(div);\n            div.innerHTML = copiedDivs[i].innerHTML;\n            for(let c = 0; c < copiedDivs[i].classList.length; c++) {\n                let regex = /revealed-*/;\n                if(regex.test(copiedDivs[i].classList.item(c))) div.classList.add(copiedDivs[i].classList.item(c));\n                if(div.getElementsByTagName(\"i\").length != 0) div.getElementsByTagName(\"i\")[0].style.opacity = \"0.5\";\n                else div.style.backgroundColor = \"rgba(31, 36, 31, 0.5)\";\n            }\n        }\n    }\n\n    function findShipCoordinates() {\n        let shipCoordinates = [];\n        let specialClasses = findSpecialClasses();\n        specialClasses.forEach(sc => {\n            let currentSpecial = [...document.getElementsByClassName(sc)];\n            let sectionCoordinates = [];\n            currentSpecial.forEach(cs => {\n                let index = Array.prototype.indexOf.call(document.querySelectorAll(\"#setup-board > div\"), cs);\n                sectionCoordinates.push(index);\n            });\n            shipCoordinates.push(sectionCoordinates);\n        });\n        return shipCoordinates;\n    }\n\n    //creates board for player and its DOM representation\n    function useSetupToSetUpPlayerBoard() {\n        playerCoordinates = findShipCoordinates();\n        playerCoordinates = (0,_helper__WEBPACK_IMPORTED_MODULE_0__.convert1Dto2DCoordinates)(playerCoordinates);\n        playerBoard = (0,_gameboard__WEBPACK_IMPORTED_MODULE_1__.Gameboard)(playerCoordinates);\n        let playerBoardDOM = document.getElementById(\"player-board\");\n        copyBoard(setupBoard, playerBoardDOM);\n    }\n\n    //creates board for enemy and its DOM representation\n    function randomlySetupEnemyBoard() {\n        let coordinates1D = randomizeShipPlacement(setupBoard).coordinates;\n        enemyCoordinates = (0,_helper__WEBPACK_IMPORTED_MODULE_0__.convert1Dto2DCoordinates)(coordinates1D);\n        enemyBoard = (0,_gameboard__WEBPACK_IMPORTED_MODULE_1__.Gameboard)(enemyCoordinates);\n    }\n\n    document.getElementById(\"start-game-btn\").onclick = () => {\n        if(document.getElementById(\"ship-pieces\").getElementsByTagName(\"div\").length === 0) {\n            document.getElementById(\"game-setup-container\").style.display = \"none\";\n            document.getElementById(\"game-container\").style.display = \"block\";\n            useSetupToSetUpPlayerBoard();\n            randomlySetupEnemyBoard();\n            let player = (0,_player__WEBPACK_IMPORTED_MODULE_2__.Player)(document.getElementById(\"name\").value, enemyBoard, true);\n            let enemy = (0,_player__WEBPACK_IMPORTED_MODULE_2__.Bot)(playerBoard, false);\n            game = (0,_game__WEBPACK_IMPORTED_MODULE_3__.Game)(player, enemy);\n            copyShipsToInitialBox();\n            clearBoard(setupBoard);\n            [...document.querySelectorAll(\"#setup-board > div\")].forEach((d,i) => addDropOffEvent(d, i));\n        }\n    }\n\n    document.getElementById(\"new-game-btn\").onclick = () => {\n        clearBoard(document.getElementById(\"bot-board\"));\n        document.getElementById(\"game-container\").style.display = \"none\";\n        document.getElementById(\"game-setup-container\").style.display = \"block\";\n        document.getElementById(\"win-lose-status\").textContent = \"\";\n        document.getElementById(\"commentary-msg\").textContent = \"\";\n        document.getElementById(\"start-game-btn\").style.color = \"white\";\n        document.getElementById(\"new-game-btn\").style.display = \"none\";\n    }\n})();\n\nconst gameSetUp = (() => {  \n    for(let i = 0; i < document.querySelectorAll(\"#setup-board > div\").length; i++) document.getElementById(\"bot-board\").append(document.createElement(\"div\"));  \n    \n    const applyStylesForAttackLocation = (locationAttacked, success, boardID) => {\n        let attackedIndex1D = locationAttacked[0] + locationAttacked[1] * 10;\n        let divs = document.querySelectorAll(\"#\" + boardID + \" > div\");\n        if(success === \"Missed\") {\n            let icon = document.createElement(\"i\");\n            icon.classList.add(\"fa-solid\");\n            icon.classList.add(\"fa-circle\");\n            divs[attackedIndex1D].append(icon);\n            divs[attackedIndex1D].classList.add(\"missed-shot\");\n        }\n        else if(success === \"Hit\") {\n            let icon = document.createElement(\"i\");\n            icon.classList.add(\"fa-solid\");\n            icon.classList.add(\"fa-explosion\");\n            divs[attackedIndex1D].append(icon);\n            divs[attackedIndex1D].classList.add(\"hit-ship\");\n        }\n        else {\n            let isHorizontal = false;\n            if(success.length > 1) isHorizontal = success[0][0] + 1 === success[1][0];\n            success.forEach((s,i) => {\n                let index1D = s[0] + s[1] * 10;\n                divs[index1D].classList.remove(\"hit-ship\");\n                let iconToRemove = divs[index1D].getElementsByClassName(\"fa-explosion\");\n                if(iconToRemove.length != 0) iconToRemove[0].remove();\n\n                if(boardID === \"bot-board\") {\n                    let icon = document.createElement(\"i\");\n                    icon.classList.add(\"fa-solid\");\n                    if(i === 0) {\n                        if(success.length === 1) divs[index1D].classList.add(\"revealed-single-ship\");\n                        else if(isHorizontal) divs[index1D].classList.add(\"revealed-ship-left\");\n                        else divs[index1D].classList.add(\"revealed-ship-top\");\n                    }\n                    else if(i === success.length - 1) {\n                        if(isHorizontal) divs[index1D].classList.add(\"revealed-ship-right\");\n                        else divs[index1D].classList.add(\"revealed-ship-bottom\");\n                    }\n                    else {\n                        divs[index1D].classList.add(\"revealed-ship-middle\");\n                    }\n    \n                    if(divs[index1D].classList.contains(\"revealed-single-ship\")) {\n                        icon.classList.add(\"fa-diamond\");\n                        divs[index1D].append(icon);\n                    }\n                    else if(!divs[index1D].classList.contains(\"revealed-ship-middle\")) {\n                        icon.classList.add(\"fa-play\");\n                        divs[index1D].append(icon);\n                    }\n                }\n                else {\n                    if(divs[index1D].classList.contains(\"revealed-ship-middle\")) divs[index1D].style.backgroundColor = \"var(--ship-color)\";\n                    else divs[index1D].getElementsByTagName(\"i\")[0].style.opacity = \"1\";\n                }\n        \n            });\n        }\n    }\n\n    const getCommentary = statuses => {\n        let possibleCommentary = [];\n        let name = document.getElementById(\"name\").value;\n        if(statuses.includes(\"Lost\")) {\n            possibleCommentary.push(\"No need to worry, Captain \" + name + \", I already evacuated from my assigned ship a long time ago!\");\n            possibleCommentary.push(\"We'll get them next time.\");\n            possibleCommentary.push(\"*glub glub*\");\n            possibleCommentary.push(\"...Has anyone seen Ron?\");\n        }\n        if(statuses.includes(\"Won\")) {\n            possibleCommentary.push(\"All praise Captain \" + name + \"!\");\n            possibleCommentary.push(\"Always knew we'd make it with you leading us!\");\n            possibleCommentary.push(\"Time to celebrate!\");\n            possibleCommentary.push(\"It was difficult, but we made it!\");\n        }\n\n        if(statuses.includes(\"Missed\")) {\n            possibleCommentary.push(\"Where next, Captain \" + name + \"?\");\n        }\n\n        if(statuses.includes(\"Hit\")) {\n            possibleCommentary.push(\"It's a hit!\");\n        }\n\n        if(statuses.includes(\"Sunk\")) {\n            possibleCommentary.push(\"Another one down!\");\n        }\n\n        if(statuses.includes(\"Behind\")) {\n            possibleCommentary.push(\"Whoops dozed off a bit there. Not exactly sure what I missed but you looked like you missed a lot.\");\n            possibleCommentary.push(\"Permission to panic? Over.\");\n            possibleCommentary.push(\"Almost got them! Oh wait, that's our ships.\");\n            possibleCommentary.push(\"Is this a bad time to tell you I don't know how to swim?\");\n        }\n        if (statuses.includes(\"Ahead\")) {\n            possibleCommentary.push(\"They don't stand a chance.\");\n            possibleCommentary.push(\"I'm starting to see what they mean by your tactical genius.\");\n            possibleCommentary.push(\"We'll be done with this in no time!\");\n            possibleCommentary.push(\"Glad I'm on your side!\");\n        }\n\n        let commentary = possibleCommentary[Math.floor(Math.random() * possibleCommentary.length)];\n        return commentary;\n    };\n\n    const setPlayerTurnView = (() => {\n        let statuses;\n        let gridSquare = document.querySelectorAll(\"#bot-board > div\");\n        [...gridSquare].forEach((square, index) => {\n            let x = index % 10;\n            let y = Math.floor(index / 10);\n            square.onclick = () => {\n                if(game.checkIfPlayerCanAttackLocation(x, y)) {\n                    let successStatus = game.playerMove(x,y);\n                    applyStylesForAttackLocation([x, y], successStatus, \"bot-board\");\n                    let newStatus = game.getGameStatus();\n                    if(statuses == null || !(0,_helper__WEBPACK_IMPORTED_MODULE_0__.arraysEqual)(statuses, newStatus)) document.getElementById(\"commentary-msg\").textContent = getCommentary(newStatus);\n                    statuses = newStatus;\n                    while(!game.checkIfPlayerTurn() && !statuses.includes(\"Won\") && !statuses.includes(\"Lost\")) {\n                        let botSuccessStatus = game.botMove();\n                        applyStylesForAttackLocation(game.lastBotMove, botSuccessStatus, \"player-board\");\n                        statuses = game.getGameStatus();\n                    }\n                    if(statuses.includes(\"Won\") || statuses.includes(\"Lost\")) {\n                        document.getElementById(\"commentary-msg\").textContent = getCommentary(statuses);\n                        document.getElementById(\"new-game-btn\").style.display = \"block\";\n                        if(statuses.includes(\"Won\")) {\n                            document.getElementById(\"win-lose-status\").textContent = document.getElementById(\"name\").value.toUpperCase() + \" WON\";\n                            let wins = document.getElementById(\"win-stat\");\n                            wins.textContent = parseInt(wins.textContent) + 1;\n                            if(wins.textContent.length === 1) wins.textContent = \"0\" + wins.textContent;\n                        }\n                        else document.getElementById(\"win-lose-status\").textContent = \"ENEMY WON\";\n                       let rounds = document.getElementById(\"rounds-played\");\n                       rounds.textContent = parseInt(rounds.textContent) + 1;\n                       if(rounds.textContent.length === 1) rounds.textContent = \"0\" + rounds.textContent;\n                    }\n                }\n            };\n            square.onmouseover = () => {\n                if (game.checkIfPlayerCanAttackLocation(x, y)) square.append(createDivForHover(true));\n                else square.append(createDivForHover(false));\n            };\n            square.onmouseleave = () => {document.getElementsByClassName(\"hover-effect\")[0].remove()};\n        });\n    })();\n})();\n\n//# sourceURL=webpack://battleship/./src/modules/DOM.js?");

/***/ }),

/***/ "./src/modules/game.js":
/*!*****************************!*\
  !*** ./src/modules/game.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Game\": () => (/* binding */ Game)\n/* harmony export */ });\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ \"./src/modules/player.js\");\n\n\nconst Game = (player, bot) => {\n    let lastBotMove;\n\n    const playerMove = (x, y) => {\n        player.attack(x, y);\n        if(!player.getIsTurn()) bot.setIsTurn(true);\n        return player.checkSuccessOfLastMove();\n    }\n\n    const botMove = () => {\n        let position = bot.decideAttackLocation();\n        bot.attack(position[0], position[1]);\n        if(!bot.getIsTurn()) player.setIsTurn(true);\n        game.lastBotMove = [position[0], position[1]];\n        return bot.checkSuccessOfLastMove();\n    }\n\n    const checkIfPlayerCanAttackLocation = (x, y) => {\n        return player.checkIfAbleToAttackLocation(x, y);\n    }\n\n    const checkIfPlayerTurn = () => {\n        return player.getIsTurn();\n    }\n\n    const getGameStatus = () => {\n        if(player.checkIfWon()) {\n            player.setIsTurn(false);\n            return [\"Won\"];\n        }\n        else if(bot.checkIfWon()) {\n            bot.setIsTurn(false);\n            return [\"Lost\"];\n        }\n\n        let status = []\n        if(player.checkShipsSunk().length - bot.checkShipsSunk().length > 2) status.push(\"Ahead\");\n        else if(player.checkShipsSunk().length - bot.checkShipsSunk().length < -2) status.push(\"Behind\");\n        if(player.checkSuccessOfLastMove() === \"Hit\") status.push(\"Hit\");\n        else if(player.checkSuccessOfLastMove() === \"Missed\") status.push(\"Missed\");\n        else status.push(\"Sunk\");\n\n        return status;\n    }\n\n    let game = {lastBotMove, playerMove, botMove, checkIfPlayerCanAttackLocation, checkIfPlayerTurn, getGameStatus};\n    return game;\n}\n\n\n\n//# sourceURL=webpack://battleship/./src/modules/game.js?");

/***/ }),

/***/ "./src/modules/gameboard.js":
/*!**********************************!*\
  !*** ./src/modules/gameboard.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Gameboard\": () => (/* binding */ Gameboard)\n/* harmony export */ });\n/* harmony import */ var _ship__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ship */ \"./src/modules/ship.js\");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helper */ \"./src/modules/helper.js\");\n\n\n\n//shipLocations in format [[[x1,y1],[x2,y2],...], [x1, y1], ...]]]\nconst Gameboard = shipLocations => {\n    let ships = [];\n    let grid;\n    let legalMoves = [];\n    let lastAttackLocation;\n\n    const Location = () => {\n        let containedShip = null;\n        let isHit = false;\n        return {containedShip, isHit};\n    }\n\n    const initializeGrid = (() => {\n        grid = new Array(10);\n        for(let r = 0; r < grid.length; r++) {\n            grid[r] = new Array(10);\n            for(let c = 0; c < grid[r].length; c++) {\n                grid[r][c] = Location();\n                legalMoves.push([r, c]);\n            }\n        }\n    })();\n\n    const placeShips = (() => {\n        shipLocations.forEach(individualShip => {\n            let ship = (0,_ship__WEBPACK_IMPORTED_MODULE_0__.Ship)(individualShip);\n            ships.push(ship);\n            individualShip.forEach(position => {\n                let gridLocation = grid[position[0]][position[1]];\n                gridLocation.containedShip = ship;\n            });\n        });\n    })();\n\n    const receiveAttack = (x, y) => {\n        if(grid[x][y].containedShip != null) grid[x][y].containedShip.hit(x, y);\n        grid[x][y].isHit = true;\n        gameboard.legalMoves.splice((0,_helper__WEBPACK_IMPORTED_MODULE_1__.indexOf2DArray)(gameboard.legalMoves, [x,y]), 1);\n        lastAttackLocation = [x, y];\n    }\n\n    const getShipsSunk = () => {\n        let sunkShips = ships.filter(ship => ship.hasSunk);\n        return sunkShips;\n    }\n\n    const checkIfAllSunk = () => {\n        let sunkShips = getShipsSunk();\n        if(sunkShips.length === ships.length) return true;\n        return false;\n    }\n\n    const checkIfLocationHitAndMissed = (x, y) => {\n        if(grid[x][y].isHit && grid[x][y].containedShip == null) return true;\n        return false;\n    }\n\n    const checkIfLocationHitWithShip = (x, y) => {\n        if(grid[x][y].isHit && grid[x][y].containedShip != null) return true;\n        return false;\n    }\n\n    const getShipSunkByLastAttack = () => {\n        if(lastAttackLocation == null) return null;\n        let x = lastAttackLocation[0];\n        let y = lastAttackLocation[1];\n        if(grid[x][y].containedShip == null || !grid[x][y].containedShip.hasSunk) return null;\n        return grid[x][y].containedShip.locationsHit;\n    }\n\n    const gameboard = {legalMoves, receiveAttack, getShipsSunk, checkIfAllSunk, checkIfLocationHitAndMissed, checkIfLocationHitWithShip, getShipSunkByLastAttack};\n    return gameboard;\n}\n\n\n\n//# sourceURL=webpack://battleship/./src/modules/gameboard.js?");

/***/ }),

/***/ "./src/modules/helper.js":
/*!*******************************!*\
  !*** ./src/modules/helper.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"arraysEqual\": () => (/* binding */ arraysEqual),\n/* harmony export */   \"convert1Dto2DCoordinates\": () => (/* binding */ convert1Dto2DCoordinates),\n/* harmony export */   \"convert2Dto1DCoordinates\": () => (/* binding */ convert2Dto1DCoordinates),\n/* harmony export */   \"findAdjacentPositions\": () => (/* binding */ findAdjacentPositions),\n/* harmony export */   \"indexOf2DArray\": () => (/* binding */ indexOf2DArray),\n/* harmony export */   \"sort2DCoordinates\": () => (/* binding */ sort2DCoordinates)\n/* harmony export */ });\nconst findAdjacentPositions = index1D => {\n    const findLeft = () => {\n        if(index1D % 10 === 0) return null;\n        return index1D - 1;\n    }\n\n    const findRight = () => {\n        if(index1D % 10 === 9) return null;\n        return index1D + 1;\n    }\n\n    const findTop = () => {\n        if(index1D - 10 < 0) return null;\n        return index1D - 10;\n    }\n\n    const findBottom = () => {\n        if(index1D + 10 > 99) return null;\n        return index1D + 10;\n    }\n\n    const findBLDiagonal = () => {\n        let bottom = findBottom();\n        if(bottom == null || findLeft() == null) return null;\n        return bottom - 1;\n    }\n\n    const findBRDiagonal = () => {\n        let bottom = findBottom();\n        if(bottom == null || findRight() == null) return null;\n        return bottom + 1;\n    }\n\n    const findTLDiagonal = () => {\n        let top = findTop();\n        if(top == null || findLeft() == null) return null;\n        return top - 1;\n    }\n\n    const findTRDiagonal = () => {\n        let top = findTop();\n        if(top == null || findRight() == null) return null;\n        return top + 1;\n    }\n    return {findLeft, findRight, findTop, findBottom, findBLDiagonal, findBRDiagonal, findTLDiagonal, findTRDiagonal};\n}\n\nfunction convert1Dto2DCoordinates(coordinates1D) {\n    let coordinates = [];\n    for(let oi = 0; oi < coordinates1D.length; oi++) {\n        coordinates.push([]);\n        for(let ii = 0; ii < coordinates1D[oi].length; ii++) {\n            coordinates[oi].push([coordinates1D[oi][ii] % 10, Math.floor(coordinates1D[oi][ii] / 10)]);\n        }\n    }\n    return coordinates;\n}\n\nfunction convert2Dto1DCoordinates(coordinates2D) {\n    let coordinates = [];\n    for(let ship = 0; ship < coordinates2D.length; ship++) {\n        coordinates.push([]);\n        for(let section = 0; section < coordinates2D[ship].length; section++) {\n            let coordinate1D = coordinates2D[ship][section][0] + coordinates2D[ship][section][1] * 10;\n            coordinates[ship].push(coordinate1D);\n        }\n    }\n    return coordinates;\n}\n\n//Assumes coordinates only differ one way for the x-direction or y-direction.\nfunction sort2DCoordinates(coordinates) {\n    if(coordinates.length < 2) return coordinates;\n    if(coordinates[0][0] != coordinates[1][0]) return coordinates.sort((a,b) => a[0] - b[0]);\n    return coordinates.sort((a,b) => a[1] - b[1]);\n}\n\nfunction indexOf2DArray(arr, element) {\n    for(let i = 0; i < arr.length; i++) {\n        if(element[0] === arr[i][0] && element[1] === arr[i][1]) return i;\n    }\n    return -1;\n}\n\nfunction arraysEqual(arr1, arr2) {\n    if(arr1 == null || arr2 == null || arr1.length !== arr2.length) return false;\n    for(let i = 0; i < arr1.length; i++) {\n        if(arr1[i] !== arr2[i]) return false;\n    }\n    return true;\n}\n\n\n\n//# sourceURL=webpack://battleship/./src/modules/helper.js?");

/***/ }),

/***/ "./src/modules/player.js":
/*!*******************************!*\
  !*** ./src/modules/player.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Bot\": () => (/* binding */ Bot),\n/* harmony export */   \"Player\": () => (/* binding */ Player)\n/* harmony export */ });\n/* harmony import */ var _gameboard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameboard */ \"./src/modules/gameboard.js\");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helper */ \"./src/modules/helper.js\");\n\n\n\nconst Player = (name, enemyGameboard, isTurn) => {\n    const getIsTurn = () => player.isTurn;\n\n    const setIsTurn = (turn) => {\n        player.isTurn = turn;\n    }\n\n    const getLastAttackLocation = () => player.lastAttackLocation;\n\n    const setLastAttackLocation = (location) => {\n        player.lastAttackLocation = location;\n    }\n\n    const attack = (x, y) => {\n        if(checkIfAbleToAttackLocation(x, y)) {\n            enemyGameboard.receiveAttack(x, y);\n            if(enemyGameboard.checkIfLocationHitAndMissed(x, y)) player.isTurn = false;\n            else player.isTurn = true;\n            player.setLastAttackLocation([x, y]);\n        }\n        else console.log(\"Unable to carry out the last attack order\");\n    }\n\n    const checkIfAbleToAttackLocation = (x, y) => {\n        return player.isTurn && !(enemyGameboard.checkIfLocationHitAndMissed(x, y) || enemyGameboard.checkIfLocationHitWithShip(x, y));\n    }\n\n    const checkSuccessOfLastMove = () => {\n        let x = player.getLastAttackLocation()[0];\n        let y = player.getLastAttackLocation()[1];\n        if(enemyGameboard.checkIfLocationHitAndMissed(x, y)) return \"Missed\";\n        else if (enemyGameboard.getShipSunkByLastAttack() != null) return (0,_helper__WEBPACK_IMPORTED_MODULE_1__.sort2DCoordinates)(enemyGameboard.getShipSunkByLastAttack()); \n        return \"Hit\";\n    }\n\n    const checkShipsSunk = () => {\n        return enemyGameboard.getShipsSunk();\n    }\n\n    const checkIfWon = () => enemyGameboard.checkIfAllSunk();\n\n    let player = {name, isTurn, getIsTurn, setIsTurn, getLastAttackLocation, setLastAttackLocation, attack, checkIfAbleToAttackLocation, checkSuccessOfLastMove, checkShipsSunk, checkIfWon};\n    return player\n}\n\nconst Bot = (enemyGameboard, isTurn) => {\n    let player = Object.create(Player(\"Enemy\", enemyGameboard, isTurn));\n    player.possibleMoves = [...enemyGameboard.legalMoves];\n    player.locationsOfInterest = [];\n\n    const eliminatePossibleMoves = () => {\n        player.possibleMoves.splice((0,_helper__WEBPACK_IMPORTED_MODULE_1__.indexOf2DArray)(player.possibleMoves, player.getLastAttackLocation()), 1);\n\n        let locations = [];\n        if(player.locationsOfInterest.length > 1) {\n            player.locationsOfInterest.forEach(l => {\n                let index1D = l[0] + l[1] * 10;\n                let finder = (0,_helper__WEBPACK_IMPORTED_MODULE_1__.findAdjacentPositions)(index1D);\n                let surroundings;\n                if(Math.abs(player.locationsOfInterest[1][0] - player.locationsOfInterest[0][0]) === 1) surroundings = [finder.findBLDiagonal(), finder.findBRDiagonal(), finder.findTLDiagonal(), finder.findTRDiagonal(), finder.findTop(), finder.findBottom()];\n                else surroundings = [finder.findBLDiagonal(), finder.findBRDiagonal(), finder.findTLDiagonal(), finder.findTRDiagonal(), finder.findLeft(), finder.findRight()];\n                surroundings.forEach(s => {\n                    if(s != null && locations.indexOf(s) == -1) locations.push(s);\n                });\n            });\n        }\n        if(Array.isArray(player.checkSuccessOfLastMove())) {;\n            let shipLocation = player.checkSuccessOfLastMove();\n            shipLocation.forEach(s => {\n                let index1D = s[0] + s[1] * 10;\n                let finder = (0,_helper__WEBPACK_IMPORTED_MODULE_1__.findAdjacentPositions)(index1D);\n                let surroundings = [finder.findBLDiagonal(), finder.findBRDiagonal(), finder.findTLDiagonal(), finder.findTRDiagonal(), finder.findLeft(), finder.findRight(), finder.findTop(), finder.findBottom()];\n                surroundings.forEach(s => {\n                    if(s != null && locations.indexOf(s) == -1) locations.push(s);\n                });\n            });\n        }\n\n        locations.forEach(l => {\n            let x = l % 10;\n            let y = Math.floor(l / 10);\n            let index = (0,_helper__WEBPACK_IMPORTED_MODULE_1__.indexOf2DArray)(player.possibleMoves, [x, y]);\n            if(index != -1) player.possibleMoves.splice((0,_helper__WEBPACK_IMPORTED_MODULE_1__.indexOf2DArray)(player.possibleMoves, [x, y]), 1);\n        });\n    }\n\n    player.attack = (x, y) => {\n        if(player.checkIfAbleToAttackLocation(x, y)) {\n            enemyGameboard.receiveAttack(x, y);\n            if(enemyGameboard.checkIfLocationHitAndMissed(x, y)) player.setIsTurn(false);\n            else player.setIsTurn(true);\n            player.setLastAttackLocation([x, y]);\n            if(player.checkSuccessOfLastMove() === \"Hit\") player.locationsOfInterest.push([x, y]);\n            else if(Array.isArray(player.checkSuccessOfLastMove())) player.locationsOfInterest = [];\n            eliminatePossibleMoves();\n        }\n        else console.log(\"Unable to carry out the last attack order\");\n    }\n    player.decideAttackLocation = () => {\n        let location;\n        if(player.locationsOfInterest.length > 0) {\n            let surroundings = [];\n            player.locationsOfInterest.forEach(l => {\n                let index1D = l[0] + l[1] * 10;\n                let finder = (0,_helper__WEBPACK_IMPORTED_MODULE_1__.findAdjacentPositions)(index1D);\n                surroundings.push(finder.findLeft(), finder.findRight(), finder.findTop(), finder.findBottom());\n            });\n            let possibleMovesIndex = -1;\n            do {\n                let surroundingsIndex = Math.floor(Math.random() * surroundings.length);\n                if(surroundings[surroundingsIndex] != null) {\n                    let x = surroundings[surroundingsIndex] % 10;\n                    let y = Math.floor(surroundings[surroundingsIndex] / 10);\n                    possibleMovesIndex = (0,_helper__WEBPACK_IMPORTED_MODULE_1__.indexOf2DArray)(player.possibleMoves, [x,y]);\n                }\n                surroundings.splice(surroundingsIndex, 1);\n            } while(possibleMovesIndex === -1 && surroundings.length > 0);\n\n            location = player.possibleMoves[possibleMovesIndex];\n        }\n        else {\n            let numPossibleMoves = player.possibleMoves.length;\n            let index = Math.floor(Math.random() * numPossibleMoves);\n            location = player.possibleMoves[index];\n        }\n        return location;\n    }\n    return player;\n}\n\n\n\n//# sourceURL=webpack://battleship/./src/modules/player.js?");

/***/ }),

/***/ "./src/modules/ship.js":
/*!*****************************!*\
  !*** ./src/modules/ship.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Ship\": () => (/* binding */ Ship)\n/* harmony export */ });\n//positionsOccupied should be passed in format [[x1,y1], [x2, y2], ...]\nconst Ship = positionsOccupied => {\n    let hasSunk = false;\n    let locationsHit = [];\n\n    const hit = (x, y) => {\n        locationsHit.push([x, y]);\n        if(locationsHit.length === positionsOccupied.length) ship.hasSunk = true;\n    };\n    const ship = {hasSunk, locationsHit, hit};\n    return ship;\n}\n\n\n\n//# sourceURL=webpack://battleship/./src/modules/ship.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;